"""initial models

Revision ID: a436e5a3a1f2
Revises: 
Create Date: 2023-01-25 15:41:26.340399

"""
from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision = 'a436e5a3a1f2'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('environments',
    sa.Column('tenant_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'name', name='_envname_tenant_id_unique_together')
    )
    op.create_table('feature_flags',
    sa.Column('tenant_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('description', sa.Text(), nullable=True),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'name', name='_flagname_tenant_id_unique_together')
    )
    op.create_table('id_groups',
    sa.Column('tenant_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.Column('id_list', postgresql.ARRAY(sa.String(length=50)), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'name', name='_idgroupname_tenant_id_unique_together')
    )
    op.create_table('tag_types',
    sa.Column('tenant_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('name', sa.String(length=50), nullable=False),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tenant_id', 'name', name='_tagname_tenant_id_unique_together')
    )
    op.create_table('feature_flag_values',
    sa.Column('tenant_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('feature_flag_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('environment_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('enabled', sa.Boolean(), nullable=False),
    sa.Column('rollout_percent', sa.Integer(), nullable=True),
    sa.Column('enabled_only_for_ids', postgresql.ARRAY(sa.String(length=50)), nullable=False),
    sa.Column('enabled_only_for_id_groups', postgresql.ARRAY(postgresql.UUID(as_uuid=True)), nullable=False),
    sa.ForeignKeyConstraint(['environment_id'], ['environments.id'], ),
    sa.ForeignKeyConstraint(['feature_flag_id'], ['feature_flags.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('feature_flag_id', 'environment_id', name='_feature_flag_environment_unique_together')
    )
    op.create_table('tag_values',
    sa.Column('tenant_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('tag_type_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('value', sa.String(length=100), nullable=False),
    sa.ForeignKeyConstraint(['tag_type_id'], ['tag_types.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('tag_type_id', 'value', name='_tag_type_value_unique_together')
    )
    op.create_table('feature_flag_tag_value_through',
    sa.Column('tenant_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('feature_flag_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.Column('tag_value_id', postgresql.UUID(as_uuid=True), nullable=False),
    sa.ForeignKeyConstraint(['feature_flag_id'], ['feature_flags.id'], ),
    sa.ForeignKeyConstraint(['tag_value_id'], ['tag_values.id'], ),
    sa.PrimaryKeyConstraint('id'),
    sa.UniqueConstraint('feature_flag_id', 'tag_value_id', name='_feature_flag_tag_value_unique_together')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('feature_flag_tag_value_through')
    op.drop_table('tag_values')
    op.drop_table('feature_flag_values')
    op.drop_table('tag_types')
    op.drop_table('id_groups')
    op.drop_table('feature_flags')
    op.drop_table('environments')
    # ### end Alembic commands ###
